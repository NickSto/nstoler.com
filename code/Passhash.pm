#!/usr/bin/perl -w

# NOTE FROM THE FUTURE:
# I have to point out that I'm now aware that this is completely wrong.
# Version 2.0 will use pbkdf2! (Or maybe scrypt!)

=begin comment

For performing multi-round, optionally salted, password hashing.

This is really just for my personal, informal use in my small projects.
(In case that wasn't clear from the default salt hard-coded into a plaintext
script file.)

It contains four public subroutines, all using SHA-512:

multi_hash($plaintext, $times):
	Perform a multi-round hash. Omit $times to use default.

vary_hash($plaintext):
	Multi-round hashing where the number of rounds varies with the length of
the input string.

salted_hash($plaintext, $salt, $times):
	Multi-round, salted hashing. Omit $times or $salt to use defaults.

salted_vary_hash($plaintext, $salt):
	Multi-round, salted hashing where the number of rounds varies with the
length of the input string. Omit $salt to use the default.

=end comment
=cut

use strict;
use Digest::SHA qw(sha512_base64);

my $DEFAULT_TIMES = 46;
my $DEFAULT_MOD = 18;
# A very random string generated by many rounds of SHA-512 hashing, adding in
# strings from sources like Perl's rand function, local unix time, Random.org,
# GRC's Perfect Passwords (grc.com/passwords.htm), GRC's Javascript page
# (grc.com/r&d/js.htm), my computer and user name, my current working
# directory, and keyboard mashing.
my $DEFAULT_SALT = 'M4jWeCa44gbyXHzprZfi8BL7YBdQ9dZFCkzNfZyPvJQGQ8sUG59iSptJvABymcOLKhrKWmxf2hIzopPLSddHsg';
# Change the hash function used by replacing it here
my $HASHFXN_REF = \&sha512_base64;




#################### HASHING FUNCTIONS ####################


# Standard multi-round hash.
# Can specify how many rounds or, if left unspecified, it will be the default.
sub multi_hash {
	
	my ($plain, $times) = @_;
	
	unless ($times) {
		$times = $DEFAULT_TIMES;
	}
	
	my $digest = $plain;
	for (1..$times) {
		# $digest = sha512_base64($digest);
		$digest = &$HASHFXN_REF($digest);
	}
	
	return $digest;
}

# Multi-round hash where the number of rounds varies a little, based on the
# length of the input string.
sub vary_hash {
	
	my ($plain) = @_;
	
	my $times = vary_times($plain);
	
	return multi_hash($plain, $times);
}
# Round-varying algorithm used by vary_hash and salted_vary_hash
sub vary_times {
	return $DEFAULT_TIMES + (length($_[0]) % $DEFAULT_MOD);
}

# Salted (and multi-round) hash. You can specify the salt and number of rounds.
# If left unspecified, both will be the default.
sub salted_hash {
	
	my ($plain, $salt, $times) = @_;
	
	unless($salt) {
		$salt = $DEFAULT_SALT;
	}
	
	my $predigest = &$HASHFXN_REF($plain . $salt);
	
	return multi_hash($predigest, $times);
}

# Salted version of the vary_hash subroutine above.
# You can specify the salt or leave it unspecified and use the default.
sub salted_vary_hash {
	
	my ($plain, $salt) = @_;
	
	unless($salt) {
		$salt = $DEFAULT_SALT;
	}
	
	my $predigest = &$HASHFXN_REF($plain . $salt);
	
	my $times = vary_times($plain);
	
	return multi_hash($predigest, $times);
}

1;